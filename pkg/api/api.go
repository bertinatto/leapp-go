package api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/leapp-to/leapp-go/pkg/executor"
	"github.com/leapp-to/leapp-go/pkg/worker"
)

// CKey represents a key to be used in context.Context.
type CKey string

// Result contains the information generated by and endpoint handler.
type Result struct {
	Errors []Error     `json:"errors,omitempty"`
	Data   interface{} `json:"data,omitempty"`
}

// Error contains details about error returned by endpoint handler.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message,omitempty"`
}

// asyncRunnerHandler wraps the result of the endpoint handler into a reponse that should be sent to the client.
func asyncRunnerHandler(fn func(*http.Request) (*executor.Command, error)) http.HandlerFunc {
	return func(writer http.ResponseWriter, request *http.Request) {
		encoder := json.NewEncoder(writer)
		var result Result

		// Calls the correct handler that will validate the data sent and create a executor.Command
		c, err := fn(request)
		if err != nil {
			e := fmt.Errorf("error on endpoint handler execution: %v", err)
			result.Errors = append(result.Errors, Error{1, e.Error()})
			encoder.Encode(result)
			return
		}

		id := worker.NewJob(c)

		result.Data = map[string]uint32{"id": id}
		encoder.Encode(result)

	}
}

// EndpointEntry represents an endpoint exposed by the daemon.
type EndpointEntry struct {
	Method   string
	Endpoint string
	Handler  http.Handler
}

// GetEndpoints should return a slice of all endpoints that the daemon exposes.
func GetEndpoints() []EndpointEntry {
	return []EndpointEntry{
		{
			Method:   "POST",
			Endpoint: "/migrate-machine",
			Handler: Adapt(
				asyncRunnerHandler(migrateMachineHandler),
				AddHeader("Content-Type", "application/json"),
			),
		},
		{
			Method:   "GET",
			Endpoint: "/migrate-machine/{migrateID}",
			Handler: Adapt(
				http.HandlerFunc(migrateMachineStatus),
				AddHeader("Content-Type", "application/json"),
			),
		},
		//{
		//Method:      "POST",
		//Endpoint:    "/port-inspect",
		//HandlerFunc: asyncRunnerHandler(portInspectHandler),
		//},
		//{
		//Method:      "POST",
		//Endpoint:    "/check-target",
		//HandlerFunc: asyncRunnerHandler(checkTargetHandler),
		//},
		//{
		//Method:      "POST",
		//Endpoint:    "/port-map",
		//HandlerFunc: asyncRunnerHandler(portMapHandler),
		//},
		//{
		//Method:      "POST",
		//Endpoint:    "/destroy-container",
		//HandlerFunc: asyncRunnerHandler(destroyContainerHandler),
		//},
	}
}
